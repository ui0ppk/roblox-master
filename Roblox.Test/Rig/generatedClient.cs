//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4062
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Roblox.Test.Client
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.roblox.com/Roblox.Test", ConfigurationName="Roblox.Test.Client.IRun")]
    public interface IRun
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.roblox.com/Roblox.Test/IRun/Ping", ReplyAction="http://www.roblox.com/Roblox.Test/IRun/PingResponse")]
        string Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.roblox.com/Roblox.Test/IRun/Execute", ReplyAction="http://www.roblox.com/Roblox.Test/IRun/ExecuteResponse")]
        string Execute(string binroot, string testname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.roblox.com/Roblox.Test/IRun/GetHeader", ReplyAction="http://www.roblox.com/Roblox.Test/IRun/GetHeaderResponse")]
        string GetHeader(string binroot, string testname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.roblox.com/Roblox.Test/IRun/SpawnProcess", ReplyAction="http://www.roblox.com/Roblox.Test/IRun/SpawnProcessResponse")]
        string SpawnProcess(out int pid, string filename, string args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.roblox.com/Roblox.Test/IRun/KillProcess", ReplyAction="http://www.roblox.com/Roblox.Test/IRun/KillProcessResponse")]
        string KillProcess(int pid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.roblox.com/Roblox.Test/IRun/Cleanup", ReplyAction="http://www.roblox.com/Roblox.Test/IRun/CleanupResponse")]
        string Cleanup();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IRunChannel : Roblox.Test.Client.IRun, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RunClient : System.ServiceModel.ClientBase<Roblox.Test.Client.IRun>, Roblox.Test.Client.IRun
    {
        
        public RunClient()
        {
        }
        
        public RunClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public RunClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public RunClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public RunClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string Ping()
        {
            return base.Channel.Ping();
        }
        
        public string Execute(string binroot, string testname)
        {
            return base.Channel.Execute(binroot, testname);
        }
        
        public string GetHeader(string binroot, string testname)
        {
            return base.Channel.GetHeader(binroot, testname);
        }
        
        public string SpawnProcess(out int pid, string filename, string args)
        {
            return base.Channel.SpawnProcess(out pid, filename, args);
        }
        
        public string KillProcess(int pid)
        {
            return base.Channel.KillProcess(pid);
        }
        
        public string Cleanup()
        {
            return base.Channel.Cleanup();
        }
    }
}
